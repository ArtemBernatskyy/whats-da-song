{"version":3,"sources":["components/TextSearch.jsx","constants/app.js","containers/App.js","serviceWorker.js","index.js"],"names":["TextSearch","props","toggleModal","setState","isModalOpen","state","song","emitChangeDebounced","debounce","emitChange","this","cancel","value","axios","get","response","status","videoId","data","appleMusicLink","split","Fragment","className","autoFocus","onChange","e","target","placeholder","src","frameBorder","allowFullScreen","rel","href","title","onClick","icon","faTimes","faFont","React","Component","AUDIO_PERMISSIONS_CHOICES","DENIED","PROMPT","GRANTED","UNKNOWN","App","showNotification","color","message","toast","dismiss","hideProgressBar","toggleRecording","a","async","isRecording","stopRecording","chunks","mediaRecorder","start","setTimeout","isAnimating","permissionsStatus","checkPermissions","initMediaRecorder","navigator","mediaDevices","getUserMedia","audio","video","stream","MediaRecorder","ondataavailable","size","push","getTracks","forEach","track","stop","sendAudio","blob","Blob","type","FormData","append","config","headers","post","artist","logoClass","classNames","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82fdbf0e.chunk.js","sourcesContent":["import React from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFont, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport debounce from 'lodash/debounce';\nimport axios from 'axios';\n\nimport '../styles/text_search.scss';\n\n\n\nclass TextSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false,\n      song: null,\n    };\n    this.emitChangeDebounced = debounce(this.emitChange, 400);\n  }\n\n  componentDidMount() {\n  }\n\n  componentWillUnmount() {\n    this.emitChangeDebounced.cancel();\n  }\n\n  toggleModal = () => {\n    this.setState({ isModalOpen: !this.state.isModalOpen });\n  }\n\n  async emitChange(value) {\n    if (!value) {\n      this.setState({ song: null });\n    };\n    try{\n      const response = await axios.get(`https://dude-what-is-the-song.herokuapp.com/song/searchByLyrics?l=${value}`);\n      if (response.status === 200) {\n        const videoId = response.data.appleMusicLink.split('http://www.youtube.com/watch?v=')[1];\n        response.data.appleMusicLink = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1`\n        this.setState({ song: response.data });\n      }\n    } catch {};\n  }\n\n  render() {\n    const { isModalOpen, song } = this.state;\n    return (\n      <React.Fragment>\n        <div className={`modal-window ${isModalOpen ? 'modal-window--visible': ''}`}>\n          <div>\n            <input autoFocus onChange={e => this.emitChangeDebounced(e.target.value)} placeholder=\"Search by lyrics\" />\n\n            {song &&\n              <div className=\"television\">\n                <div className=\"television__center\">\n                  <div className=\"television__screen\">\n                    <iframe\n                      src={song.appleMusicLink} frameBorder=\"0\" allowFullScreen></iframe>\n                  </div>\n                  <div className=\"television__channels-wrapper\">\n                    <ul className=\"television__channels\">\n                      <li className=\"television__channel\">\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/artembernatskyy/\" title=\"Channel 1\" />\n                      </li>\n                      <li className=\"television__channel\">\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/michael-rudyy/\" title=\"Channel 2\"/>\n                      </li>\n                      <li className=\"television__channel\">\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/ikasyk/\" title=\"Channel 3\"/>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            }\n\n          </div>\n        </div>\n        <div className={`lyrics-search ${isModalOpen ? 'lyrics-search--opened': ''}`} onClick={this.toggleModal}>\n          <FontAwesomeIcon icon={isModalOpen ? faTimes : faFont} />\n        </div>\n      </React.Fragment>\n     )\n  }\n}\n\nexport default TextSearch;\n","export const AUDIO_PERMISSIONS_CHOICES = {\n  DENIED: 'denied',\n  PROMPT: 'prompt',\n  GRANTED: 'granted',\n  UNKNOWN: 'unknown',\n};\n","import React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport classNames from 'classnames';\nimport axios from 'axios';\n\nimport '../styles/App.scss';\nimport TextSearch from '../components/TextSearch';\nimport { AUDIO_PERMISSIONS_CHOICES } from '../constants/app';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAnimating: false,\n      permissionsStatus: AUDIO_PERMISSIONS_CHOICES.UNKNOWN,\n      isRecording: false,\n    };\n    this.mediaRecorder = null;\n    this.chunks = [];\n  }\n\n  async componentDidMount() {\n    await this.checkPermissions();\n    if (this.state.permissionsStatus === AUDIO_PERMISSIONS_CHOICES.GRANTED) {\n      this.initMediaRecorder();\n    }\n  }\n\n  showNotification = (color, message) => {\n    toast.dismiss();\n    toast[color](message, { hideProgressBar: true });\n  }\n\n  async initMediaRecorder() {\n    let stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n    this.mediaRecorder = new MediaRecorder(stream);\n    this.mediaRecorder.ondataavailable = e => {\n      if (e.data && e.data.size > 0) {\n        this.chunks.push(e.data);\n      }\n    };\n  }\n\n  async checkPermissions() {\n    try {\n      let stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n      stream.getTracks().forEach(track => track.stop());\n      this.showNotification('success', 'Audio permissions granted');\n      this.setState({ permissionsStatus: AUDIO_PERMISSIONS_CHOICES.GRANTED });\n    } catch (error) {\n      this.showNotification('error', 'Audio permissions denied');\n      this.setState({ permissionsStatus: AUDIO_PERMISSIONS_CHOICES.DENIED });\n    }\n  }\n\n  async stopRecording() {\n    // stop recording\n    this.mediaRecorder.stop();\n    // say that we're not recording\n    // send audio to backend\n    await this.sendAudio();\n    this.setState({ isAnimating: false, isRecording: false });\n  }\n\n  toggleRecording = async () => {\n    const { isRecording } = this.state;\n\n    if (isRecording) {\n      this.stopRecording();\n    } else {\n      // start recording\n      // wipe old data chunks\n      this.chunks = [];\n      // start recorder with 10ms buffer\n      this.mediaRecorder.start(10);\n      // set timeout for 10 seconds after which we will automatically stop recording\n      setTimeout(() => {\n        if (this.mediaRecorder.state === 'recording') {\n          this.stopRecording();\n        }\n      }, 10000);\n      // say that we're recording\n      this.setState({ isAnimating: true, isRecording: true });\n    }\n  };\n\n  async sendAudio() {\n    // convert saved chunks to blob\n    const blob = new Blob(this.chunks, {type: 'audio/webm'});\n    const data = new FormData();\n    data.append('file', blob, 'recording.webm');\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n    try {\n      const response = await axios.post(\n        `https://dude-what-is-the-song.herokuapp.com/song/searchByFile`,\n        data, config\n      );\n      if (response.status === 200) {\n        this.showNotification('success', `${response.data.artist} - ${response.data.title}`);\n      } else {\n        this.showNotification('warning', \"Can't find any matching song\")\n      }\n    } catch {\n        this.showNotification('warning', \"Can't find any matching song\")\n    }\n  }\n\n  render() {\n    const { isAnimating, permissionsStatus } = this.state;\n    const logoClass = classNames({\n      logo: true,\n      'logo--animate': isAnimating,\n      'logo--disabled': permissionsStatus !== AUDIO_PERMISSIONS_CHOICES.GRANTED,\n    });\n    return (\n      <div>\n        <div className=\"shazam-container\">\n          <div onClick={this.toggleRecording} className={logoClass}>\n              <div className=\"c-shape\"></div>\n              <div className=\"c-shape reverse\"></div>\n          </div>\n          <div className={`outer-circle ${this.state.isAnimating ? 'outer-circle--animate': ''}`}></div>\n          <div className={`outer-circle2 ${this.state.isAnimating ? 'outer-circle2--animate': ''}`}></div>\n        </div>\n\n        {!isAnimating &&\n          <TextSearch />\n        }\n\n        <ToastContainer />\n\n      </div>\n     )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}