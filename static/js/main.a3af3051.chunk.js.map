{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["AUDIO_PERMISSIONS_CHOICES","DENIED","PROMPT","GRANTED","UNKNOWN","App","props","showNotification","color","message","toast","dismiss","hideProgressBar","toggleRecording","a","async","state","isRecording","stopRecording","chunks","mediaRecorder","start","setTimeout","setState","isAnimating","permissionsStatus","this","checkPermissions","initMediaRecorder","navigator","mediaDevices","getUserMedia","audio","video","stream","MediaRecorder","ondataavailable","e","data","size","push","permissions","query","name","permissionsCheck","getTracks","forEach","track","stop","sendAudio","blob","Blob","type","FormData","append","config","headers","axios","post","response","status","artist","title","logoClass","classNames","logo","className","onClick","icon","faFont","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3af3051.chunk.js","sourcesContent":["export const AUDIO_PERMISSIONS_CHOICES = {\n  DENIED: 'denied',\n  PROMPT: 'prompt',\n  GRANTED: 'granted',\n  UNKNOWN: 'unknown',\n};\n","import React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFont } from '@fortawesome/free-solid-svg-icons'\nimport classNames from 'classnames';\nimport axios from 'axios';\n\nimport './styles/App.scss';\nimport { AUDIO_PERMISSIONS_CHOICES } from './constants';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAnimating: false,\n      permissionsStatus: AUDIO_PERMISSIONS_CHOICES.UNKNOWN,\n      isRecording: false,\n    };\n    this.mediaRecorder = null;\n    this.chunks = [];\n  }\n\n  async componentDidMount() {\n    await this.checkPermissions();\n    if (this.state.permissionsStatus === AUDIO_PERMISSIONS_CHOICES.GRANTED) {\n      this.initMediaRecorder();\n    }\n  }\n\n  showNotification = (color, message) => {\n    toast.dismiss();\n    toast[color](message, { hideProgressBar: true });\n  }\n\n  async initMediaRecorder() {\n    let stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n    this.mediaRecorder = new MediaRecorder(stream);\n    this.mediaRecorder.ondataavailable = e => {\n      if (e.data && e.data.size > 0) {\n        this.chunks.push(e.data);\n      }\n    };\n  }\n\n  async checkPermissions() {\n    const permissionsCheck = await navigator.permissions.query({name:'microphone'})\n    if (permissionsCheck.state === AUDIO_PERMISSIONS_CHOICES.GRANTED) {\n      this.showNotification('info', 'Audio permissions granted');\n      this.setState({ permissionsStatus: AUDIO_PERMISSIONS_CHOICES.GRANTED });\n    } else if (permissionsCheck.state === AUDIO_PERMISSIONS_CHOICES.PROMPT) {\n      this.showNotification('info', 'Plz allow audio permissions');\n      this.setState({ permissionsStatus: AUDIO_PERMISSIONS_CHOICES.PROMPT });\n      try {\n        let stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n        stream.getTracks().forEach(track => track.stop());\n        this.showNotification('success', 'Audio permissions granted');\n        this.setState({ permissionsStatus: AUDIO_PERMISSIONS_CHOICES.GRANTED });\n      } catch (error) {\n        if (error.message && error.message === 'Permission denied') {\n          this.showNotification('error', 'Audio permissions denied');\n          this.setState({ permissionsStatus: AUDIO_PERMISSIONS_CHOICES.DENIED });\n        }\n      }\n    } else if (permissionsCheck.state === AUDIO_PERMISSIONS_CHOICES.DENIED) {\n      this.showNotification('error', 'Audio permissions denied');\n      this.setState({ permissionsStatus: AUDIO_PERMISSIONS_CHOICES.DENIED });\n    }\n  }\n\n  async stopRecording() {\n    // stop recording\n    this.mediaRecorder.stop();\n    // say that we're not recording\n    // send audio to backend\n    await this.sendAudio();\n    this.setState({ isAnimating: false, isRecording: false });\n  }\n\n  toggleRecording = async () => {\n    const { isRecording } = this.state;\n\n    if (isRecording) {\n      this.stopRecording();\n    } else {\n      // start recording\n      // wipe old data chunks\n      this.chunks = [];\n      // start recorder with 10ms buffer\n      this.mediaRecorder.start(10);\n      // set timeout for 10 seconds after which we will automatically stop recording\n      setTimeout(() => {\n        if (this.mediaRecorder.state === 'recording') {\n          this.stopRecording();\n        }\n      }, 10000);\n      // say that we're recording\n      this.setState({ isAnimating: true, isRecording: true });\n    }\n  };\n\n  async sendAudio() {\n    // convert saved chunks to blob\n    const blob = new Blob(this.chunks, {type: 'audio/webm'});\n    const data = new FormData();\n    data.append('file', blob, 'recording.webm');\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n    try {\n      const response = await axios.post(\n        `https://dude-what-is-the-song.herokuapp.com/song/searchByFile`,\n        data, config\n      );\n      if (response.status === 200) {\n        this.showNotification('success', `${response.data.artist} - ${response.data.title}`);\n      } else {\n        this.showNotification('warning', \"Can't find any matching song\")\n      }\n    } catch {\n        this.showNotification('error', 'Backend error');\n    }\n  }\n\n  render() {\n    const { isAnimating, permissionsStatus } = this.state;\n    const logoClass = classNames({\n      logo: true,\n      'logo--animate': isAnimating,\n      'logo--disabled': permissionsStatus !== AUDIO_PERMISSIONS_CHOICES.GRANTED,\n    });\n    return (\n      <div>\n        <div className=\"shazam-container\">\n          <div onClick={this.toggleRecording} className={logoClass}>\n              <div className=\"c-shape\"></div>\n              <div className=\"c-shape reverse\"></div>\n          </div>\n          <div className={`outer-circle ${this.state.isAnimating ? 'outer-circle--animate': ''}`}></div>\n          <div className={`outer-circle2 ${this.state.isAnimating ? 'outer-circle2--animate': ''}`}></div>\n        </div>\n\n        {!isAnimating &&\n          <div className=\"lyrics-search\">\n            <FontAwesomeIcon icon={faFont} />\n          </div>\n        }\n\n        <ToastContainer />\n\n      </div>\n     )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}